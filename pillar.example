cluster:
  # Cluster name
  name: hacluster

  # Node which will create the cluster.
  # To create multiple clusters, set different
  # pillar data with different nodes as
  # firstnode. Each firstnode will create
  # a separate cluster
  init: minion-1

  # optional: nodes that should be removed
  # from the cluster.
  # remove: []

  # optional: Configure the watchdog device. module and device are mandatory
  # watchdog:
  #   module: softdog
  #   device: /dev/watchdog

  # optional: Network interface to use for cluster communication
  # interface: eth0

  # optional: UDP instead of multicast
  # unicast: True

  # optional: Time in seconds between hawk service is available in the first
  # node and join command is executed (20s by default)
  # wait_for_initialization: 20

  # optional: Timeout in seconds to join to the cluster
  # join_timeout: 60

  # optional: Configure a virtual IP resource in cluster
  # admin_ip: 10.20.30.40

  # optional: Configure SBD
  # sbd:
  #   # optional: Configure an SBD device
  #   device: /dev/by-label/sbd-disk

  # optional: Install required packages to run the cluster (true by default)
  # pre-configured packages sometimes exist for development purposes
  # install_packages: true

  # optional: ntp server
  # ntp: pool.ntp.org

  # optional: enable ha_exporter by default disabled
  ha_exporter: true

  # optional: update hacluster password
  hacluster_password: mypassword

  # optional: Authorize ssh connection from nodes to willing to join
  # ssheys:
  #   # Overwrite current keys
  #   overwrite: true
  #   # First node root password
  #   password: admin

  # optional: Resource agents packages to install
  # resource_agents:
  #   - resouce_agent_pkg

  # optional: Configure cluster resource agents and constraints
  # configure:
  #   method: update
  #   # optional, url or template, one of them must be used
  #   url: path_to_configfile
  #   is_xml: False
  #   # optional, jinja2 template can be used to create the configuration file.
  #   template:
  #     source: path_to_template
  #     # optional
  #     destination: path_to_destination_file
  #     # optional: parameters to add in the template
  #     # the template must start with to use them: {% set data = pillar.cluster.configure.template.parameters %}
  #     parameters:
  #       param1: value1
  #       param2: value2


# -*- mode: yaml -*-
# vim: ft=yaml
